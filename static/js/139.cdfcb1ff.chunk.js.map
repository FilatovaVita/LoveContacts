{"version":3,"file":"static/js/139.cdfcb1ff.chunk.js","mappings":"qPACaA,EAAqBC,EAAAA,EAAAA,IAAH,sLASlBC,EAAgBD,EAAAA,EAAAA,EAAH,2JASbE,EAAeF,EAAAA,EAAAA,IAAH,kH,+IChBZG,GAAaH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,qUAcVK,GAAaL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,4MAWVO,EAAYP,EAAAA,EAAAA,OAAH,ggB,6IClBhBQ,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,SAAS,0BACTC,QACC,2HACA,0IAEDD,WACHE,SAAUL,EAAAA,KAAaG,SAAS,8BAKhCG,MAAON,EAAAA,KAAaM,QAAQH,SAAS,6BAG1BI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAER,KAAM,GAAII,MAAO,GAAID,SAAU,IAChDM,SARiB,SAAC,EAAD,GAA+C,IAA5CT,EAA2C,EAA3CA,KAAMI,EAAqC,EAArCA,MAAOD,EAA8B,EAA9BA,SAAcO,EAAgB,EAAhBA,UAC3CC,EAAgB,CAAEX,KAAAA,EAAMI,MAAAA,EAAOD,SAAAA,GACrCG,GAASM,EAAAA,EAAAA,IAASD,IAClBD,GACD,EAKGG,iBAAkBhB,EAHpB,UAKE,UAAC,KAAD,YACE,qCACA,SAAC,KAAD,CAAYiB,KAAK,OAAOd,KAAK,OAAOe,YAAY,eAChD,SAAC,KAAD,CAAcf,KAAK,OAAnB,SACG,SAAAgB,GAAG,OAAI,gBAAKC,MAAO,CAAEC,MAAO,OAArB,SAA+BF,GAAnC,KAGN,sCACA,SAAC,KAAD,CAAYF,KAAK,QAAQd,KAAK,QAAQe,YAAY,gBAClD,SAAC,KAAD,CAAcf,KAAK,QAAnB,SACG,SAAAgB,GAAG,OAAI,gBAAKC,MAAO,CAAEC,MAAO,OAArB,SAA+BF,GAAnC,KAGN,yCACA,SAAC,KAAD,CAAYF,KAAK,OAAOd,KAAK,WAAWe,YAAY,mBACpD,SAAC,KAAD,CAAcf,KAAK,WAAnB,SACG,SAAAgB,GAAG,OAAI,gBAAKC,MAAO,CAAEC,MAAO,OAArB,SAA+BF,GAAnC,KAGN,SAAC,KAAD,CAAWF,KAAK,SAAhB,0BAIP,E,UC5Dc,SAASK,IACtB,OACE,UAAC,KAAD,YACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAACf,EAAD,MAGL,C","sources":["components/App/App.styled.jsx","components/ContactForm/ContactForm.styled.jsx","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const PhonebookContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 0;\n  box-sizing: border-box;\n  align-items: center;\n  justify-content: center;\n`;\nexport const DefoltMassege = styled.p`\n  color: red;\n  margin: 10px;\n  text-transform: uppercase;\n  padding: 50px 170px;\n  font-weight: bolder;\n  font-size: large;\n`;\n\nexport const HelloMassege = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 50vh;\n`;\n","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  width: auto;\n  height: auto;\n  border-radius: 5px;\n  margin: 2% auto;\n  box-shadow: 0 9px 50px hsla(20, 67%, 75%, 0.31);\n  padding: 2%;\n  background-image: linear-gradient(-225deg, #e3fdf5 50%, #ffe6fa 50%);\n  display: flex;\n  flex-direction: column;\n  > label {\n    margin-top: 2%;\n  }\n`;\nexport const InputStyle = styled(Field)`\n  width: 350px;\n  height: 40px;\n  margin-top: 2%;\n  padding: 10px;\n  font-size: 14px;\n  color: #5e6472;\n  outline: none;\n  border: none;\n  border-radius: 0px 5px 5px 0px;\n`;\nexport const AddButton = styled.button`\n  display: inline-block;\n  color: #252537;\n  width: 280px;\n  height: 50px;\n  padding: 0 10px;\n  background: #fff;\n  border-radius: 5px;\n  font-weight: bold;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  text-align: center;\n  margin: 7% auto;\n  letter-spacing: 0.05em;\n  box-shadow: 0 0 40px 40px #ffb8c6 inset, 0 0 0 0 #ffb8c6;\n  transition: 0.15s ease-in-out;\n  &:hover {\n    box-shadow: 0 0 10px 0 #ffb8c6 inset, 0 0 10px 4px #ffb8c6;\n    color: #ffb8c6;\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport { register } from 'redux/auth/operations';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport {\n  AddButton,\n  FormStyled,\n  InputStyle,\n} from '../ContactForm/ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required('Please Enter your name')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+((['`_ -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  password: yup.string().required('Please Enter your password'),\n  // .matches(\n  //   /^(?=.*[A-Za-z])(?=.*d)(?=.*[@$!%*#?&])[A-Za-zd@$!%*#?&]{8,}$/,\n  //   'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character'\n  // ),\n  email: yup.string().email().required('Please Enter your Email'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    const registerValue = { name, email, password };\n    dispatch(register(registerValue));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <label>Name</label>\n        <InputStyle type=\"text\" name=\"name\" placeholder=\"Your Name\" />\n        <ErrorMessage name=\"name\">\n          {msg => <div style={{ color: 'red' }}>{msg}</div>}\n        </ErrorMessage>\n\n        <label>Email</label>\n        <InputStyle type=\"email\" name=\"email\" placeholder=\"Your Email\" />\n        <ErrorMessage name=\"email\">\n          {msg => <div style={{ color: 'red' }}>{msg}</div>}\n        </ErrorMessage>\n\n        <label>Password</label>\n        <InputStyle type=\"text\" name=\"password\" placeholder=\"Your Password\" />\n        <ErrorMessage name=\"password\">\n          {msg => <div style={{ color: 'red' }}>{msg}</div>}\n        </ErrorMessage>\n\n        <AddButton type=\"submit\">Register</AddButton>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { PhonebookContainer } from '../components/App/App.styled';\n\nexport default function Register() {\n  return (\n    <PhonebookContainer>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </PhonebookContainer>\n  );\n}\n"],"names":["PhonebookContainer","styled","DefoltMassege","HelloMassege","FormStyled","Form","InputStyle","Field","AddButton","schema","yup","shape","name","required","matches","password","email","RegisterForm","dispatch","useDispatch","initialValues","onSubmit","resetForm","registerValue","register","validationSchema","type","placeholder","msg","style","color","Register","Helmet"],"sourceRoot":""}