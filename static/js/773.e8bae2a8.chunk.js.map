{"version":3,"file":"static/js/773.e8bae2a8.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/Loader/Loader.js","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const PhonebookContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 0;\n  box-sizing: border-box;\n  align-items: center;\n  justify-content: center;\n`;\nexport const DefoltMassege = styled.p`\n  color: red;\n  margin: 10px;\n  text-transform: uppercase;\n  padding: 50px 170px;\n  font-weight: bolder;\n  font-size: large;\n`;\n\nexport const HelloMassege = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 50vh;\n`;\n","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  width: auto;\n  height: auto;\n  border-radius: 5px;\n  margin: 2% auto;\n  box-shadow: 0 9px 50px hsla(20, 67%, 75%, 0.31);\n  padding: 2%;\n  background-image: linear-gradient(-225deg, #e3fdf5 50%, #ffe6fa 50%);\n  display: flex;\n  flex-direction: column;\n  > label {\n    margin-top: 2%;\n  }\n`;\nexport const InputStyle = styled(Field)`\n  width: 350px;\n  height: 40px;\n  margin-top: 2%;\n  padding: 10px;\n  font-size: 14px;\n  color: #5e6472;\n  outline: none;\n  border: none;\n  border-radius: 0px 5px 5px 0px;\n`;\nexport const AddButton = styled.button`\n  display: inline-block;\n  color: #252537;\n  width: 280px;\n  height: 50px;\n  padding: 0 10px;\n  background: #fff;\n  border-radius: 5px;\n  font-weight: bold;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  text-align: center;\n  margin: 7% auto;\n  letter-spacing: 0.05em;\n  box-shadow: 0 0 40px 40px #ffb8c6 inset, 0 0 0 0 #ffb8c6;\n  transition: 0.15s ease-in-out;\n  &:hover {\n    box-shadow: 0 0 10px 0 #ffb8c6 inset, 0 0 10px 4px #ffb8c6;\n    color: #ffb8c6;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContact = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContact, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { nanoid } from 'nanoid';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyled, InputStyle, AddButton } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContact } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+((['`_ -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .number()\n    .typeError(\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required()\n    .positive()\n    .integer(),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContact);\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const contact = { id: nanoid(), name, number };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(contact));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <label>Name</label>\n        <InputStyle type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <ErrorMessage name=\"name\">\n          {msg => <div style={{ color: 'red' }}>{msg}</div>}\n        </ErrorMessage>\n\n        <label>Number</label>\n        <InputStyle type=\"tel\" name=\"number\" placeholder=\"Phone number\" />\n        <ErrorMessage name=\"number\">\n          {msg => <div style={{ color: 'red' }}>{msg}</div>}\n        </ErrorMessage>\n\n        <AddButton type=\"submit\">Add Contact</AddButton>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import propTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { DelButton, ListItem } from './ContactItem.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport PropTypes from 'prop-types';\n\nexport const ContactItem = ({ filteredContacts }) => {\n  const dispatch = useDispatch();\n\n  return filteredContacts.map(({ name, number, id }) => (\n    <ListItem key={id}>\n      <span>{name}: </span>\n      <span>{number}</span>\n      <DelButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </DelButton>\n    </ListItem>\n  ));\n};\n\nContactItem.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: propTypes.string.isRequired,\n      id: propTypes.string.isRequired,\n      number: propTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListStyled = styled.ul`\n  list-style: none;\n  margin: 0 auto;\n  width: 500px;\n`;\n","import { useSelector } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { ContactListStyled } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  return (\n    <ContactListStyled>\n      <ContactItem filteredContacts={filteredContacts} />\n    </ContactListStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n  width: auto;\n  height: auto;\n  border-radius: 5px;\n  margin: 2% auto;\n  box-shadow: 0 9px 50px hsla(20, 67%, 75%, 0.31);\n  padding: 2%;\n  background-image: linear-gradient(-225deg, #e3fdf5 50%, #ffe6fa 50%);\n  display: flex;\n  flex-direction: column;\n\n  > label {\n    margin-top: 2%;\n  }\n`;\n\nexport const FilterInput = styled.input`\n  width: 350px;\n  height: 40px;\n  margin: 2%;\n  padding: 10px;\n  font-size: 14px;\n  color: #5e6472;\n  outline: none;\n  border: none;\n  border-radius: 0px 5px 5px 0px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport { FilterContainer, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <label>Find contacts by name</label>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        filter={filter}\n        onChange={onFilter}\n      />\n    </FilterContainer>\n  );\n};\n","import { Hearts } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <Hearts\n      height=\"350\"\n      width=\"250\"\n      color=\"pink\"\n      ariaLabel=\"hearts-loading\"\n      wrapperStyle={{\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport {\n  PhonebookContainer,\n  DefoltMassege,\n} from '../components/App/App.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getContact,\n  getError,\n  getIsLoading,\n} from '../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from '../components/Loader/Loader';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const contacts = useSelector(getContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <PhonebookContainer>\n      <h1>Add contact here!</h1>\n      <ContactForm />\n\n      {contacts.length ? (\n        <>\n          <h2>Contacts</h2>\n          {isLoading && !error && <Loader />}\n          <Filter />\n        </>\n      ) : (\n        <DefoltMassege>\n          You dont have contacts! Please, field this Contact Form!\n        </DefoltMassege>\n      )}\n      <ContactList />\n    </PhonebookContainer>\n  );\n}\n"],"names":["PhonebookContainer","styled","DefoltMassege","HelloMassege","FormStyled","Form","InputStyle","Field","AddButton","getContact","state","contacts","getIsLoading","isLoading","getError","error","getFilter","filter","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","trim","name","includes","schema","yup","shape","matches","required","number","typeError","positive","integer","ContactForm","dispatch","useDispatch","useSelector","initialValues","onSubmit","resetForm","contact","id","nanoid","find","alert","addContact","validationSchema","type","placeholder","msg","style","color","ContactItem","filteredContacts","map","onClick","deleteContact","ContactListStyled","ContactList","FilterContainer","FilterInput","Filter","onChange","e","setFilter","target","value","Loader","height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","visible","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}